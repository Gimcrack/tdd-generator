<template>
    <div class="tabs-right" :class="{active : show}">
        <button @click="toggle" :class="{active : show, animate : animate_header}" class="btn btn-info btn-sm btn-toggle-chat">
            <i class="fa fa-btn fa-comment"></i>
        </button>

        <div class="chats relative" :class="{active:show}">
            <div class="panel relative">
                <div class="panel-header" v-if="here.length">
                    <ul class="fa-ul here-users">
                        <li v-for="here_user in here" :key="here_user.id">
                            <i class="fa-li fa fa-circle"></i> {{ (here_user.name != user.name) ? here_user.name : 'Me' }}
                        </li>
                    </ul>
                </div>
                <div v-if="busy" class="spinner">
                        <i class="fa fa-fw fa-refresh fa-spin fa-5x"></i>
                    </div>
                <div ref="body" class="panel-body">

                    <template v-if="models.length">
                        <chat v-for="chat in sorted_models" :key="chat.id" :model="chat"></chat>

                        <div v-if="other_typing_name.length" class="chat-container">
                            <div class="chat">
                                <small>{{ other_typing_name.join(', ') }} typing <br> </small>
                                ...
                            </div>
                            <div  class="spacer"></div>
                        </div>
                    </template>
                </div>
                <div class="panel-footer">
                    <textarea ref="input"
                      @keyup="type"
                      @keydown.enter.prevent="send"
                      class="form-control"
                      placeholder="Listen to this..."
                      v-model="message"
                      rows="3">
                    </textarea>
                </div>
            </div>
        </div>
    </div>

</template>

<script>
    import _ from 'lodash';

    export default {

        props : ['user'],

        mounted() {
            this.listen();
            this.scroll();
        },

        computed : {
            sorted_models() {
                return _(this.models).orderBy(o => o.id).value()
            },
            animate_header() {
                return ! this.show && this.newMessage;
            }
        },

        data() {
            return {
                models : this.getInitialState(),
                busy : false,
                message : '',
                show : true, // Store.$ls.get('viewChat',true),
                other_typing_name : [],
                channel : null,
                here: [],
                newMessage : false
            }
        },

        methods: {
            listen() {
                this.channel = Echo.join('chat');

                this.channel
                    .here( (users) => {
                        this.here = users;
                    })
                    .joining( (user) => {
                        //flash.success(`${user.name} has signed in.`);
                        this.here.push(user);
                    })
                    .leaving( (user) => {
                        //flash.success(`${user.name} has signed out.`);
                        this.here.$remove(user);
                    })
                    .listen('ChatMessageReceived', (event) => {
                        this.models.push(event.chat);

                        if (event.chat.user.id !== this.user.id) {
                            if ( ! this.show ) {
                                //flash.notify(event.chat.user.name + ' : ' + event.chat.message);
                                this.newMessage = true;
                            }
                        }

                        this.scroll();
                    })
                    .listenForWhisper('typing', (event) => {
                        if ( event.user.id != this.user.id ) {
                            this.other_typing_name.$add(event.user.name.split(' ')[0]);
                            this.scroll();
                        }
                    })
                    .listenForWhisper('done_typing', (event) => {
                        if ( event.user.id != this.user.id ) {
                            this.other_typing_name.$remove(event.user.name.split(' ')[0]);
                        }
                    })
            },

            focus() {
                sleep(500).then( () => {
                    this.$refs.input.focus();
                });
            },

            getInitialState() {
                let key = 'chats',
                    state = INITIAL_STATE[key] || [];

                return state;
            },

            type() {
                this.whisperTyping();
            },

            whisperTyping() {
                let evnt = ( !! this.message.trim().length ) ? 'typing' : 'done_typing';

                if ( this.message.trim().length > 3) return false;

                this.channel.whisper(evnt, {user : this.user});
            },

            scroll() {
                sleep(100).then( () => {
                    this.$refs.body.scrollTop = this.$refs.body.scrollHeight;
                } )
            },

            fetch() {
                this.busy = true;

                Api.get( 'chat' )
                    .then( this.success, this.error )
            },

            send() {
                if ( ! this.message.trim() ) return false;

                let message = this.message;

                this.busy = true;
                this.message = '';
                this.whisperTyping();

                Api.post( 'chat', { message })
                    .then( this.sendSuccess, (error) => this.error(error, message) )
            },

            success({data}) {
                this.busy = false;
                sleep(3000).then( () => {
                    this.$refs.input.focus();
                });
                this.models = data;
                this.scroll();


            },

            sendSuccess() {
                this.busy = false;
            },

            error(error, message) {
                this.message = message;
                this.whisperTyping();
                console.error(error);
            },

            toggle() {
                this.show = ! this.show;
                this.newMessage = false;
                Store.$ls.set('viewChat',this.show);
                this.scroll();

                if ( this.show ) {
                    this.focus();
                }
            }
        }
    }
</script>

<style lang="scss">
    @import "../../sass/variables";

    .btn-toggle-chat {
        position: fixed;
        right:1em;
        top:10px;
        z-index: 6;

        &.animate {
            animation: color 2s infinite;
        }
    }

    .chats {
        position: relative;
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction:column;

        background: transparent;

        .here-users {
            margin: 1em 2em 0.5em;
            color: $theme-color;
        }

        &.active {

            .panel-body {
                display: block;
            }

            .panel-footer {
                display: block;
            }

            .here {
                display: block;
                //position: absolute;
                /*font-size: 10px;*/
                /*font-weight: bold;*/
                /*left: 0px;*/
                /*bottom: 465px;*/
                /*height: auto;*/
                /*width: 100%;*/
                /*margin: 0;*/
                /*padding: 0.5em;*/

                ul {
                    margin: 0 0 0 16px;
                }
            }
        }

        .panel {
            height: 100%;
            width: 100%;
            border-radius: 0;
            //box-shadow: 3px 3px 6px rgba(0,0,0,0.4);
            display: flex;
            flex-direction: column;
            background: transparent;
            margin:0;
        }

        .panel-body {
            display: none;
            flex: 1;
            background: transparent !important;
            overflow: auto;
        }

        .panel-footer {
            display: none;
            padding: 0;

            textarea {
                margin: 0px;
                width: 100%;
                border: none;
                height: 78px;
            }
        }

        .spinner {
            position: absolute;

            left: 0;
            top: 43px;
            right: 0;
            height: 176px;
            z-index: 10;
            background: rgba(0,0,0,0.1);
            color: rgba(0,0,0,0.2);
            display: flex;
            justify-content: center;
            align-items: center;
        }
    }

    @keyframes color {
        0% {
            background-color: $brand-info;
        }
        50% {
            background-color: $brand-primary;
        }
        100% {
            background-color: $brand-info;
        }
    }
</style>
