<?php

namespace Tests\Unit;

use App\[Thing];
use Tests\TestCase;
use App\Events\[Thing]WasCreated;
use App\Events\[Thing]WasUpdated;
use App\Events\[Thing]WasDestroyed;
use Illuminate\Support\Facades\Event;
use Illuminate\Foundation\Testing\RefreshDatabase;

class [Thing]Test extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     * @expectedException \Illuminate\Database\QueryException
     */
    public function it_must_have_a_name()
    {
        create([Thing]::class, [
            'name' => null
        ]);
    }

    /**
     * @test
     * @expectedException \Illuminate\Database\QueryException
     */
    public function it_must_have_a_unique_name()
    {
        create([Thing]::class, [
            'name' => '[Thing] Name'
        ]);

        create([Thing]::class, [
            'name' => '[Thing] Name'
        ]);
    }

    /** @test */
    function an_event_is_dispatched_when_a_[thing]_is_created()
    {
        Event::fake();
        $[thing] = create([Thing]::class);
        $this->assertEvent([Thing]WasCreated::class, [ '[thing]' => $[thing] ]);
    }

    /** @test */
    function an_event_is_dispatched_when_a_[thing]_is_updated()
    {
        Event::fake();
        // given a [thing]
        $[thing] = create([Thing]::class);

        // act - update the [thing]
        $[thing]->update([
            'name' => 'New Name'
        ]);
        $this->assertEvent([Thing]WasUpdated::class, [ '[thing]' => $[thing] ]);
    }

    /** @test */
    function an_event_is_dispatched_when_a_[thing]_is_destroyed()
    {
        Event::fake();
        // given a [thing]
        $[thing] = create([Thing]::class);

        // act - delete the [thing]
        $[thing]->delete();
        $this->assertEvent([Thing]WasDestroyed::class, [ '[thing]' => $[thing] ]);
    }
 }
